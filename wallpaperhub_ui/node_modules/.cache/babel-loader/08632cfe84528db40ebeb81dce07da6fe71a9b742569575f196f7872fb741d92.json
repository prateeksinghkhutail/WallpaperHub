{"ast":null,"code":"var _jsxFileName = \"D:\\\\Docs\\\\Projects\\\\react projects\\\\wallpaperhub\\\\wallpaperhub_ui\\\\src\\\\components\\\\Wallpapers.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport ImageService from '../Services/ImageService';\nimport Wallpaper from './Wallpaper';\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wallpapers = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await ImageService.getImages();\n        //console.log(response.data)\n        setImages(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex\",\n    children: [images.length > 0 && images.map(image => /*#__PURE__*/_jsxDEV(Wallpaper, {\n      image: image\n    }, image.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(ResponsiveMasonry, {\n      columnsCountBreakPoints: {\n        350: 1,\n        750: 2,\n        900: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Masonry, {\n        children: images.map((image, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          style: {\n            width: \"100%\",\n            display: \"block\"\n          },\n          alt: \"\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Wallpapers, \"d1MpCMz81PlwYqJYCu9bC32uQN8=\");\n_c = Wallpapers;\nexport default Wallpapers;\nvar _c;\n$RefreshReg$(_c, \"Wallpapers\");","map":{"version":3,"names":["React","useEffect","useState","ImageService","Wallpaper","Masonry","ResponsiveMasonry","jsxDEV","_jsxDEV","Wallpapers","_s","images","setImages","loading","setLoading","fetchData","response","getImages","data","error","console","log","className","children","length","map","image","id","fileName","_jsxFileName","lineNumber","columnNumber","columnsCountBreakPoints","i","src","style","width","display","alt","_c","$RefreshReg$"],"sources":["D:/Docs/Projects/react projects/wallpaperhub/wallpaperhub_ui/src/components/Wallpapers.jsx"],"sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport ImageService from '../Services/ImageService';\r\nimport Wallpaper from './Wallpaper';\r\nimport Masonry, {ResponsiveMasonry} from \"react-responsive-masonry\"\r\n\r\nconst Wallpapers = () => {\r\n\r\n    const[images,setImages]=useState([]);\r\n    const[loading,setLoading]=useState(true);\r\n\r\n    useEffect(()=>{\r\n        const fetchData=async()=>\r\n        {\r\n            setLoading(true);\r\n            try{\r\n\r\n                const response=await ImageService.getImages();\r\n                //console.log(response.data)\r\n                setImages(response.data);\r\n            }catch(error)\r\n            {\r\n                console.log(error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n        fetchData();\r\n\r\n    },[]);\r\n\r\n  return (\r\n    <div className='flex'>\r\n        \r\n        \r\n            {images.length>0 &&(\r\n                images.map((image)=>(\r\n                    <Wallpaper  image={image} key={image.id}/>\r\n                ))\r\n                \r\n\r\n            )}\r\n           \r\n       \r\n\r\n            <ResponsiveMasonry\r\n                    columnsCountBreakPoints={{350: 1, 750: 2, 900: 3}}\r\n                >\r\n                    <Masonry>\r\n                        {images.map((image, i) => (\r\n                            <img\r\n                                key={i}\r\n                                src={image}\r\n                                style={{width: \"100%\", display: \"block\"}}\r\n                                alt=\"\"\r\n                            />\r\n                        ))}\r\n                    </Masonry>\r\n            </ResponsiveMasonry>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wallpapers"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,IAAGC,iBAAiB,QAAO,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAErB,MAAK,CAACC,MAAM,EAACC,SAAS,CAAC,GAACV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAK,CAACW,OAAO,EAACC,UAAU,CAAC,GAACZ,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAI;IACV,MAAMc,SAAS,GAAC,MAAAA,CAAA,KAChB;MACID,UAAU,CAAC,IAAI,CAAC;MAChB,IAAG;QAEC,MAAME,QAAQ,GAAC,MAAMb,YAAY,CAACc,SAAS,EAAE;QAC7C;QACAL,SAAS,CAACI,QAAQ,CAACE,IAAI,CAAC;MAC5B,CAAC,QAAMC,KAAK,EACZ;QACIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACtB;MACAL,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC;IACDC,SAAS,EAAE;EAEf,CAAC,EAAC,EAAE,CAAC;EAEP,oBACEP,OAAA;IAAKc,SAAS,EAAC,MAAM;IAAAC,QAAA,GAGZZ,MAAM,CAACa,MAAM,GAAC,CAAC,IACZb,MAAM,CAACc,GAAG,CAAEC,KAAK,iBACblB,OAAA,CAACJ,SAAS;MAAEsB,KAAK,EAAEA;IAAM,GAAMA,KAAK,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC1C,CAGJ,eAIDvB,OAAA,CAACF,iBAAiB;MACV0B,uBAAuB,EAAE;QAAC,GAAG,EAAE,CAAC;QAAE,GAAG,EAAE,CAAC;QAAE,GAAG,EAAE;MAAC,CAAE;MAAAT,QAAA,eAElDf,OAAA,CAACH,OAAO;QAAAkB,QAAA,EACHZ,MAAM,CAACc,GAAG,CAAC,CAACC,KAAK,EAAEO,CAAC,kBACjBzB,OAAA;UAEI0B,GAAG,EAAER,KAAM;UACXS,KAAK,EAAE;YAACC,KAAK,EAAE,MAAM;YAAEC,OAAO,EAAE;UAAO,CAAE;UACzCC,GAAG,EAAC;QAAE,GAHDL,CAAC;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAKb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAItB;AAEV,CAAC;AAAArB,EAAA,CAzDKD,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AA2DhB,eAAeA,UAAU;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}